# Drupal with PostgreSQL
#
# Access via "http://localhost:${PORT}"
#   (or "http://$(docker-machine ip):${PORT}" if using docker-machine)
#
# During initial Drupal setup,
# Database type: PostgreSQL
# Database name: postgres
# Database username: postgres
# Database password: example
# ADVANCED OPTIONS; Database host: postgres

version: '3'

services:
  app:
    image: drupal:latest
    container_name: "drupal"
    depends_on:
      - db
    ports:
      - ${HOST_PORT}:80

    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - "modules:/var/www/html/modules"
      - "profiles:/var/www/html/profiles"
      - "themes:/var/www/html/themes"
      - "downloads:/var/www/html/downloads"
      # this takes advantage of the feature in Docker that a new anonymous
      # volume (which is what we're creating here) will be initialized with the
      # existing content of the image at the same location
      - "sites:/var/www/html/sites"

    labels:
      - docker-volume-backup.stop-during-backup=true

    restart: unless-stopped

  db:
    image: postgres:alpine
    container_name: "db"
    environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_DB}

    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
        - db_data:/var/lib/postgresql/data

    labels:
      - docker-volume-backup.stop-during-backup=true

    restart: unless-stopped

  backup:
    image: offen/docker-volume-backup:latest
    restart: unless-stopped
    env_file: ./backup.env

    environment:
      - AWS_S3_PATH=${COMPOSE_PROJECT_NAME}

    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./notifications.tmpl:/etc/dockervolumebackup/notifications.d/notifications.tmpl
      - modules:/backup/modules:ro
      - profiles:/backup/profiles:ro
      - themes:/backup/themes:ro
      - downloads:/backup/downloads:ro
      - sites:/backup/sites:ro
      - db_data:/backup/db_data:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /${HOME}/backups/${COMPOSE_PROJECT_NAME}:/archive

volumes:
  modules:
  profiles:
  themes:
  downloads:
  sites:
  db_data:


